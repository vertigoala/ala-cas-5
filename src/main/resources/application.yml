---
info:
  scm-url: "@scm.url@"
  build-url: "http://travis-ci.org/@env.TRAVIS_REPO_SLUG@/builds/@env.TRAVIS_BUILD_ID@"
  stage: prod
spring:
  application:
    name: "@pom.artifactId@"
  session:
    store-type: none
    timeout: 28800
    redis:
      namespace: 'cas'
server:
  use-forward-headers: true
  tomcat:
    remote_ip_header: x-forwarded-for
    port-header: x-forwarded-port
    protocol_header: x-forwarded-proto
    protocol-header-https-value: https
    # Add IPv6 localhost to default list
    internal-proxies: 10\.\d{1,3}\.\d{1,3}\.\d{1,3}|192\.168\.\d{1,3}\.\d{1,3}|169\.254\.\d{1,3}\.\d{1,3}|127\.\d{1,3}\.\d{1,3}\.\d{1,3}|172\.1[6-9]{1}\.\d{1,3}\.\d{1,3}|172\.2[0-9]{1}\.\d{1,3}\.\d{1,3}|172\.3[0-1]{1}\.\d{1,3}\.\d{1,3}|0:0:0:0:0:0:0:1|::1
# FLYWAY (FlywayProperties)
flyway:
  baseline-description: Previous CAS deployment schema #
  baseline-version: 1 # version to start migration
  baseline-on-migrate: true #
#  check-location: false # Check that migration scripts location exists.
  clean-on-validation-error: false # Warning ! Do not enable in production ! Whether to automatically call clean or not when a validation error occurs.
  enabled: true # Enable flyway.
#  encoding: UTF-8 #
  ignore-failed-future-migration: false #
#  init-sqls: # SQL statements to execute to initialize a connection immediately after obtaining it.
  locations: classpath:db/migration # locations of migrations scripts
#  out-of-order: false # Allows migrations to be run "out of order". If you already have versions 1 and 3 applied, and now a version 2 is found, it will be applied too instead of being ignored.
#  password: # JDBC password if you want Flyway to create its own DataSource
#  placeholder-prefix: #
#  placeholder-replacement: #
#  placeholder-suffix: #
#  placeholders.*: #
#  schemas: # schemas to update
#  sql-migration-prefix: V #
#  sql-migration-separator: __ #
#  sql-migration-suffix: .sql #
#  table: #
#  url: # JDBC url of the database to migrate. If not set, the primary configured data source is used.
#  user: # Login user of the database to migrate.
#  validate-on-migrate: true #

jndi:
  hikari:
    jdbccas:
      driverClass: com.mysql.jdbc.Driver
#      url: jdbc:mysql://localhost:3306/emmet?serverTimezone=Australia/Sydney&useSSL=false
#      user: root
#      password: password
#      dataSourceProperties:
#        cachePrepStmts: true
#        prepStmtCacheSize: 250
#        prepStmtCacheSqlLimit: 2048

cas:
  service-registry:
#    watcherEnabled: true
#    repeatInterval: 120000
#    startDelay: 15000
    initFromJson: true
#    json:
#      location: classpath:/services
    mongo:
      collection: services
      databaseName: cas-service-registry
      userId: cas
      password: password
      socket-keep-alive: true
    jpa:
      driverClass: com.mysql.jdbc.Driver
      dialect: org.hibernate.dialect.MySQL57Dialect
      ddlAuto: validate
      healthQuery: /* ping */ SELECT
  person-directory:
    return-null: true
  authn:
    accept:
      users: ''
    attribute-repository:
      expirationTime: 5
      expirationTimeUnit: MINUTES
      maximumCacheSize: 1000 #TODO TUNING
      merger: REPLACE
# Attributes that you wish to resolve for the principal
      defaultAttributesToRelease: id,userid,givenName,sn,firstname,lastname,email,affiliation,organisation,city,state,country,role,authority,legacyPassword,created,lastLogin
      jdbc:
        - dataSourceName: java:comp/env/jdbccas
          driverClass: com.mysql.jdbc.Driver
          requireAllAttributes: false
          # caseCanonicalization=NONE|LOWER|UPPER
          caseCanonicalization: NONE
          queryType: AND
          singleRow: false
          # TODO determine whether calling a stored proc is officially supported by the Apereo JDBC PersonDir
          sql: call sp_get_user_attributes(?);
          # username is not used because we don't use {0} in sql: above
          username: username
          # Used only when there is a mapping of many rows to one user
          columnMappings:
            key: value
          attributes:
            userid: userid
            id: id
            givenName: givenName
            firstname: firstname
            sn: sn
            lastname: lastname
            email: email
            authority: authority
            role: role
            affiliation: affiliation
            organisation: organisation
            city: city
            state: state
            country: country
            activated: activated
            disabled: disabled
            expired: expired
            created: created
            last_updated: lastUpdated
            last_login: lastLogin
#      groovy:
#        - location: classpath:scripts/attribute-repo.groovy
    jdbc:
      query:
        - dataSourceName: java:comp/env/jdbccas
          sql: SELECT p.password as password, u.locked as disabled, COALESCE(p.expiry < CURRENT_TIMESTAMP(), 0) as expired, FALSE as legacy_password FROM passwords p JOIN users u ON u.userid = p.userid AND u.activated = 1 AND p.status = 'CURRENT' AND p.type = 'bcrypt' WHERE u.username = ?;
          fieldPassword: password
          fieldDisabled: disabled
#          fieldExpired: expired
          driverClass: com.mysql.jdbc.Driver
          principalAttributeList: legacy_password:legacyPassword
          # principalAttributeList:sn,cn:commonName,givenName
          passwordEncoder:
            type: BCRYPT
            characterEncoding: UTF-8
            strength: 10
        - dataSourceName: java:comp/env/jdbccas
          sql: SELECT p.password as password, u.locked as disabled, COALESCE(p.expiry < CURRENT_TIMESTAMP(), 0) as expired, TRUE as legacy_password FROM passwords p JOIN users u ON u.userid = p.userid AND u.activated = 1 AND p.status = 'CURRENT' WHERE u.username = ?;
          fieldPassword: password
          fieldDisabled: disabled
#          fieldExpired: expired
          driverClass: com.mysql.jdbc.Driver
          principalAttributeList: legacy_password:legacyPassword
          passwordEncoder:
            type: au.org.ala.cas.password.AlaPasswordEncoder
    pac4j:
      typedIdUsed: true
#      autoRedirect: false
#      name:
      facebook:
        # fields:
        scope: public_profile,email
      google:
        scope: EMAIL_AND_PROFILE
        # scope=EMAIL|PROFILE|EMAIL_AND_PROFILE
      twitter:
        includeEmail: true
    oauth:
      userProfileViewType: FLAT
      access-token:
        maxTimeToLiveInSeconds: "PT8H"
        timeToKillInSeconds: "PT2H"
      refresh-token:
        timeToKillInSeconds: "P14D"
    oidc:
      scopes:
        - openid
        - profile
        - email
        #- address
        #- phone
        - offline_access
        - ala
        - roles
      claims: # This list is all the specified oidc claims plus ALA specific
        - sub
        - name
        - preferred_username
        - family_name
        - given_name
        - middle_name
        - given_name
        - profile
        - picture
        - nickname
        - website
        - zoneinfo
        - locale
        - updated_at
        - birthdate
        - email
        - email_verified
        - phone_number
        - phone_number_verified
        - address
        - organisation
        - role
        - authority
        - city  # TODO condense these into the address scope somehow?
        - state
        - country
      userDefinedScopes:
        ala: organisation, city, state, country #, primary_user_type, secondary_user_type
        roles: role, authority
      claimsMap:
        sub: userid #	string	Subject - Identifier for the End-User at the Issuer.
        name: displayName #	string	End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences.
        given_name: givenName #	string	Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.
        family_name: sn #	string	Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.
        #middle_name: middleName #	string	Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used.
        #nickname: nickname	# string	Casual name of the End-User that may or may not be the same as the given_name. For instance, a nickname value of Mike might be returned alongside a given_name value of Michael.
        #preferred_username: email #	string	Shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe. This value MAY be any valid JSON string including special characters such as @, /, or whitespace. The RP MUST NOT rely upon this value being unique, as discussed in Section 2.5.3.
        #profile: #	string	URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.
        #picture: #	string	URL of the End-User's profile picture. This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. Note that this URL SHOULD specifically reference a profile photo of the End-User suitable for displaying when describing the End-User, rather than an arbitrary photo taken by the End-User.
        #website: #	string	URL of the End-User's Web page or blog. This Web page SHOULD contain information published by the End-User or an organization that the End-User is affiliated with.
        email: email #	string	End-User's preferred e-mail address. Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax. The RP MUST NOT rely upon this value being unique, as discussed in Section 2.5.3.
        #email_verified: #	boolean	True if the End-User's e-mail address has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this e-mail address was controlled by the End-User at the time the verification was performed. The means by which an e-mail address is verified is context specific, and dependent upon the trust framework or contractual agreements within which the parties are operating.
        #gender: #	string	End-User's gender. Values defined by this document are female and male. Other values MAY be used when neither of the defined values are applicable.
        #birthdate: #	string	End-User's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted. To represent only the year, YYYY format is allowed. Note that depending on the underlying platform's date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates.
        # TODO add zoneinfo and locale
        #zoneinfo: #	string	String from zoneinfo [zoneinfo] time zone database representing the End-User's time zone. For example, Europe/Paris or America/Los_Angeles.
        #locale: #	string	End-User's locale, represented as a BCP47 [RFC5646] language tag. This is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash. For example, en-US or fr-CA. As a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example, en_US; Relying Parties MAY choose to accept this locale syntax as well.
        #phone_number	string	End-User's preferred telephone number. E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400. If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678.
        #phone_number_verified	boolean	True if the End-User's phone number has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this phone number was controlled by the End-User at the time the verification was performed. The means by which a phone number is verified is context specific, and dependent upon the trust framework or contractual agreements within which the parties are operating. When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format.
        #address	JSON object	End-User's preferred postal address. The value of the address member is a JSON [RFC4627] structure containing some or all of the members defined in Section 2.5.1.
        #updated_at	number	Time the End-User's information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T00:00:00Z as measured in UTC until the date/time.
    throttle:
      failure:
        range-seconds: 30
        threshold: 3
  monitor:
    jdbc:
      dataSourceName: java:comp/env/jdbccas
      driverClass: com.mysql.jdbc.Driver
      validationQuery: /* ping */ SELECT 1
    endpoints:
      enabled: true
      sensitive: true
      dashboard:
        enabled: true
#        sensitive: true
      auditEvents:
        enabled: true
#        sensitive: true
      authenticationEvents:
        enabled: true
#        sensitive: false
      configurationState:
        enabled: true
#        sensitive: false
      healthCheck:
        enabled: true
#        sensitive: false
      loggingConfig:
        enabled: true
#        sensitive: false
      metrics:
        enabled: true
#        sensitive: false
      attributeResolution:
        enabled: true
#        sensitive: false
      singleSignOnReport:
        enabled: true
#        sensitive: false
      statistics:
        enabled: true
#        sensitive: false
      discovery:
        enabled: true
#        sensitive: false
      trustedDevices:
        enabled: true
#        sensitive: false
      status:
        enabled: true
#        sensitive: false
      singleSignOnStatus:
        enabled: true
#        sensitive: false
      springWebflowReport:
        enabled: true
#        sensitive: false
      registeredServicesReport:
        enabled: true
#        sensitive: false
      configurationMetadata:
        enabled: true
#        sensitive: false
  tgc:
    maxAge: 28800 # Same as TGT expiry
    secure: true
    httpOnly: true
    rememberMeMaxAge: PT7884000S #7884000
    crypto:
      enabled: false
#    encryptionKey=
#    signingKey=
#    cipherEnabled=true
  theme:
    default-theme-name: ala
  ticket:
    tgt:
      maxTimeToLiveInSeconds: 28800 # PT8H
      timeToKillInSeconds: 28800 # PT8H
      rememberMe:
        enabled: true
        timeToKillInSeconds: 7884000 # P3M
    registry:
#      cleaner:
#        schedule:
#          enabled: true
#          startDelay: 10000
#          repeatInterval: 60000
      mongo:
        userId: cas
        password: password
        databaseName: cas-ticket-registry
        timeout: PT10S
        socket-keep-alive: true
#      jpa:
#        driverClass: com.mysql.jdbc.Driver
#        ddl-auto: validate
#        dialect: org.hibernate.dialect.MySQL57Dialect
#        jpaLockingTgtEnabled: true
#       crypto:
#          signing:
#            key:
#            keySize: 512
#          encryption:
#            key:
#            keySize: 16
#          alg: AES
  jdbc:
    showSql: false
#  genDdl: true
  logout:
    followServiceRedirects: true
    redirectParameter: url
    confirmLogout: false
  slo:
    disabled: false
    asynchronous: true
  sso:
    allowMissingServiceParameter: true
    renewAuthnEnabled: true #createSsoSessionCookieOnRenewAuthentications
  httpWebRequest:
    header:
      xframe: false
      contentSecurityPolicy: frame-ancestors 'self' *.ala.org.au;
    cors:
      enabled: true
      allowCredentials: true
      allowOrigins:
        - "*"

# Override these for non-ALA deployments
ala:
  userDetailsBaseUrl: https://auth.ala.org.au/userdetails/
  cookie:
    domain: ala.org.au
    httpOnly: true
    maxAge: -1
    rememberMeMaxAge: ${cas.tgc.rememberMeMaxAge}
    name: ALA-Auth
    path: /
    secure: false
    quoteValue: true
    urlEncodeValue: false
  userCreator:
    defaultCountry: AU
    userCreatePassword: "CHANGE_ME"
    countriesListUrl: ${ala.userDetailsBaseUrl}ws/registration/countries
    statesListUrl: ${ala.userDetailsBaseUrl}ws/registration/states
    passwordEncoder: # This should be the same as the primary password encoder above
      type: BCRYPT
      characterEncoding: UTF-8
      strength: 10
    jdbc:
      driverClass: com.mysql.jdbc.Driver
      dataSourceName: java:comp/env/jdbccas
      enableUpdateLastLoginTime: true
      enableRequestExtraAttributes: true
      enableUpdateLegacyPasswords: true
  skin:
    baseUrl: https://www.ala.org.au/
    termsUrl: ${ala.skin.baseUrl}terms-of-use/
    headerFooterUrl: ${ala.skin.baseUrl}commonui-bs3/
    favIconBaseUrl: ${ala.skin.baseUrl}wp-content/themes/ala-wordpress-theme/img/favicon/
    loginLogo: images/supporting-graphic-element-flat-medium.png
    bieBaseUrl: https://bie.ala.org.au/
    bieSearchPath: search
    userDetailsUrl: ${ala.userDetailsBaseUrl}
    resetPasswordUrl: ${ala.skin.userDetailsUrl}registration/forgottenPassword
    createAccountUrl: ${ala.skin.userDetailsUrl}registration/createAccount
    orgShortName: ALA
    orgLongName: Atlas Of Living Australia
    orgNameKey: ala
    cacheDuration: PT30m # 1800000
    ui-version: 2
debug: false