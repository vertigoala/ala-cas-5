info:
  description: ALA CAS Configuration

# Enable these for Spring Boot actuator (required for Spring Boot Admin client)

#endpoints:
#  enabled: true
#security:
##  ignored[0]: "/**"
#  filterOrder: 0
#  user:
#    name: admin
#    password: secret
#    role:
#      - ACTUATOR
#  basic:
#    enabled: true
#    authorizeMode: role
#    realm: ALA CAS
#    path:
#      - /status/**
#management:
#  security:
#    enabled: true
#    roles: ACTUATOR

# Enable these to connect to a Spring Boot Admin server

#spring:
#  boot:
#    admin:
#      url: https://bootadmin.example.org:8444
#      client:
#        managementUrl: ${cas.server.prefix}/status
#        name: ALA CAS
#        metadata:
#          user:
#            name: xxxxxxxx
#            password: xxxxxxx

# Enable these for HA
#spring:
#  session:
#    store-type: redis
#    timeout: 28800
#    disable-redis-config-action: true # enable in environment where redis CONFIG action is disabled, eg AWS elasticache
#  redis:
#    host: some-distributed-redis
#    password: password
#    port: 6379


jndi:
  hikari:
    jdbccas:
      name: jdbccas
      driverClass: com.mysql.jdbc.Driver
      url: jdbc:mysql://localhost/cas[?serverTimezone=Australia/Sydney]
      user: username
      password: password
      dataSourceProperties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048

flyway:
  url: jdbc:mysql://localhost/cas[?serverTimezone=Australia/Sydney]
  user: root
  password: password

cas:
  adminPagesSecurity:
#    ip: ".*"
#    actuatorEndpointsEnabled: true
  authn:
    jdbc:
      query:
        - dataSourceName: java:comp/env/jdbccas # For the bcrypt password encoder
        - dataSourceName: java:comp/env/jdbccas # For md5 password encoder
    attributeRepository:
      jdbc:
        - dataSourceName: java:comp/env/jdbccas
    pac4j:
      facebook:
        id: xxxxxxxxxxxxxxx
        secret: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        scope: public_profile,email
      twitter:
        id: xxxxxxxxxxxxxxxxxxxxxxxxx
        secret: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      google:
        id: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        secret: xxxxxxxxxxxxxxxxxxxxxxxx
        scope: EMAIL_AND_PROFILE
    oidc:
      issuer: https://devt.ala.org.au/cas/oidc
      jwksFile: file:/data/cas/config/keystore.jwks
#      jwksCacheInMinutes: 60
#      skew: 5
#      dynamicClientRegistrationMode: OPEN or PROTECTED
#      scopes:
#      claims:
#      subjectTypes:
#      userDefinedScopes:
#      claimsMap:
#    oauth:
#      grants:
#        resourceOwner:
#          requireServiceHeader: true/false
#      code:
#        numberOfUses: 1
#        timeToKillInSeconds: 30
#      accessToken:
#        maxTimeToLiveInSeconds: PT28800S
#        timeToKillInSeconds: PT7200S
#        releaseProtocolAttributes: true
#      refreshToken:
#        timeToKillInSeconds: P14D
#      userProfileViewType: NESTED | FLAT
#      throttler: neverThrottle | authenticationThrottle
  monitor:
    endpoints:
#      enabled: true
    jdbc:
      validationQuery: /* ping */ SELECT 1
      dataSourceName: java:comp/env/jdbccas
  serviceRegistry:
    initFromJson: true
    config:
      location: file:/data/cas/services
    jpa:
      ddlAuto: update
      url: jdbc:mysql://localhost/services
      user: root
      password: password
  ticket:
    rememberMe:
      enabled: true
    registry:
      jpa:
        ddl-auto: update
        url: jdbc:mysql://localhost/casTicketRegistry[?serverTimezone=Australia/Sydney]
        user: username
        password: password
        crypto:
          signing:
            key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          encryption:
            key: xxxxxxxxxxxxxxxx
  tgc:
    crypto:
      encryption:
        key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      signing:
        key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  webflow:
    crypto:
      signing:
        key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      encryption:
        key: xxxxxxxxxxxxxxxx
  # https://apereo.github.io/cas/5.0.x/installation/Configuration-Properties.html#message-bundles
  # Allow to override messages locally via /var/opt/atlas/i18n/cas
  # In custom_messages only text messages to translate via crowdin
  messageBundle:
    baseNames: file:///var/opt/atlas/i18n/cas/messages,file:///opt/atlas/i18n/cas/messages,classpath:other_messages,classpath:custom_messages,classpath:messages

ala:
  userCreator:
    userCreatePassword: random-default-password-here
    jdbc:
      dataSourceName: java:comp/env/jdbccas
#      sql: sp_create_user
